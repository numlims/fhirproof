ParentingCheck checks that parent references add up.

<<ParentingCheck.py
<<import>>
class ParentingCheck(FhirCheck):
    <<init>>
    <<check>>
    <<end>>
>>

<<check
def check(self, entry):
    resource = dig(entry, "resource")
    sampleid = fh.sampleid(resource)
    <<.>>
>>

Wir wuerden gerne checken, ob die Eltern-Kind Beziehungen zwischen
Proben stimmen.

Wenn eine Probe Derived ist, sollte sie auf einen Parent zeigen, der
entweder schon in der db ist oder der in der json Datei vor der Probe
kommt.
        
Aliquotgruppen sollen nicht kinderlos sein.

<<
# is there a reference to a parent?
if fh.type(resource) == "DERIVED":

    # is there a fhirid referencing a parent?
    pfhirid = fh.parent_fhirid(resource)
    if pfhirid == None:
        self.err(f"sample {sampleid} is a derived, but there isn't a reference to a parent.")
        # we assume that we already visited the parent, if not, message
    elif pfhirid not in self.fp.entrybyfhirid:
        self.err(f"the parent of derived sample {sampleid} hasn't been encountered in the json file yet.")

    if fh.parent_fhirid(resource) not in self.fp.aqtgchildless:
        self.err(f"the aliquotgroup of sample {sampleid} hasn't been encountered yet.") 
    # print(fh.parent_fhirid(resource) + " is not childless")
    self.fp.aqtgchildless[fh.parent_fhirid(resource)] = False
>>

End wird gerufen nachdem alle samples durchgelaufen sind.

<<end
def end(self):
    for fhirid in self.fp.aqtgchildless.keys():
        if self.fp.aqtgchildless[fhirid] == True:
            self.err(f"aliquotgroup {fhirid} is childless.")
>>

Init heangt ParentingCheck an fhirproof.

<<init
    def __init__(self, fp):
        FhirCheck.__init__(self, fp)
>>

Die imports.

<<import
import re

from dig import *
from FhirCheck import *
from fhirhelp import fhirhelp as fh
>>

