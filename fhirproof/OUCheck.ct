# OUCheck checks whether the organisation units in the db and json match.

if a derived sample is not (yet) in the db it check's the organisation
unit of the patient to whom the sample belongs.

``//OUCheck.py:
``import``
class OUCheck(FhirCheck):
    ``init``
    ``_check``
    ``check``
``

check starts the check.

``/check:
def check(self, entry):
    ``.``
``

if there's no db connection don't check.

``
    if self.db == None:
        return 
``

get the resource and sampleid, get the sample from traction.

``
    resource = dig(entry, "resource")

    sampleid = fh.sampleid(resource)

    res = self.fp.tr.sample(sampleids=[sampleid], verbose=[tr.orgunit_code])
    trsample = None
    if len(res) > 0:
      trsample = res[0]
``

get the sample org from json.

``
    sampleorgjson = fh.org(resource)
    typ = fh.type(resource)
``

do different checks for primary and aliquot samples.

don't check the org for aliquot groups.

``
    if trsample != None and typ == "MASTER":
        ``primary``
    elif typ == "DERIVED": 
        ``aliquot``
``

for primary samples, check that the db and json orgs match.

if the org is not given in the json, don't check.

``./primary:
        if sampleorgjson != None:
            self._check(trsample[tr.orgunit_code], sampleorgjson, sampleid)
``

check an aliquot sample.

``/check/aliquot:
        if trsample != None:
            ``in db``
        else:
            ``not in db``
``

if the aliquot is in the db:

if orga given in json, check that it matches the db orga.

``/check/aliquot/in db:
            if sampleorgjson != None:
                self._check(trsample[tr.orgunit_code], sampleorgjson, sampleid)
``

if no orga given in the json, ignore.

if the aliquot is not in the db:

if no orga given in the json, it's an error, cause the aliquot would be
created, and for this it needs an orga.

``/check/aliquot/not in db:
            if sampleorgjson == None:
                self.err(f"there is no json org for derived sample {sampleid}")
``

if orga given in the json, check that the aliquot's patient orga matches.

get the patient orga.

maybe:

patientid = trsample[tr.patientid]
pat = trac.patient(patientids=[patientid], verbose=[tr.orga_code])

``
            else:
                patorgq = """
                SELECT OU.CODE as 'organisationunit.code' FROM CENTRAXX_IDCONTAINER IDC 
                INNER JOIN CENTRAXX_PATIENTORGUNIT POU ON IDC.PATIENTCONTAINER=POU.PATIENTCONTAINER_OID 
                INNER JOIN CENTRAXX_IDCONTAINERTYPE IDCT ON IDC.IDCONTAINERTYPE=IDCT.OID 
                INNER JOIN CENTRAXX_ORGANISATIONUNIT OU ON POU.ORGUNIT_OID=OU.OID 
                WHERE OU.CODE != 'NUM' AND IDCT.CODE=? AND IDC.PSN=?
                """
                psn = fh.limspsn(resource)
                res = self.db.qfad(patorgq, "LIMSPSN", psn)
                patorg = None
                if len(res) > 0:
                   patorg = res[0]['organisationunit.code'] # todo ist es immer LIMSPSN?
``

do the orgas of patient and sample match?

``
                if sampleorgjson != patorg: # todo print patient psn
                    self.err(f"organisation units don't match for patient and sample {sampleid}, json org of sample is {sampleorgjson}, db org of its patient is {patorg}")
``

_check checks whether db orga and json orga of sample match.

``/_check:
def _check(self, dborga, jsonorga, sampleid):
    ``.``
``

the db sample has no orga.

``
    if dborga == None:
        self.err(f"no organisation in db for sample {sampleid}")
``

the json sample has no orga.

``
    if jsonorga == None:
        self.err(f"no organisation in json for sample {sampleid}")
``

do the orgas from db and json match?

``
    if dborga != jsonorga:
        self.err(f"organisation units don't match for sample {sampleid}, json orga is {jsonorga}, db orga is {dborga}")
``

init inits the check.

``/init:
    def __init__(self, fp):
        FhirCheck.__init__(self, fp)
``

the imports.

``/import:
import re

from dip import dig
from fhirproof.FhirCheck import *
from fhirproof.fhirhelp import fhirhelp as fh
import tr
``





## old

Der Patient keonnte zu Organisationseinheiten gehoeren, wegen
Patientenzusammenfuehrungen. Dann waere die eine OE 'NUM'. Die filtern
wir raus.

Ist die Organisationunit vom Patienten und die der Probe die selbe?

Die Organisationunit der Probe liegt im Json. Die Organisationunit vom
Patienten holen wir aus der Datenbank.  Gibt es keine Datenbank, skippen wir den check.



    """dq query for sample org:
    select centraxx_organisationunit {
      .code[!= 'NUM'],
      <centraxx_sample<centraxx_sampleidcontainer {
        .psn[=?], .idcontainertype[=6]
      }
    }
    """
#                patorgq = """ # with patientcontainer
#                select ou.code as 'organisationunit.code' from centraxx_idcontainer idc
#                inner join centraxx_patientcontainer pc on idc.patientcontainer=pc.oid
#                inner join centraxx_patientorgunit pou on pou.patientcontainer_oid=pc.oid
#                inner join centraxx_organisationunit ou on pou.orgunit_oid=ou.oid
#                inner join centraxx_idcontainertype idct on idc.idcontainertype=idct.oid
#                where ou.code != 'NUM' and idct.code=? and idc.psn=?
#                """
                """
                dq query:
                centraxx_idcontainer {
                  .psn[=?],
                  .patientcontainer(i) {
                      <centraxx_patientorgunit(i).orgunit_oid(i).code[!='NUM']
                   },
                  .idcontainertype(i).code[=?]
                }
                """
