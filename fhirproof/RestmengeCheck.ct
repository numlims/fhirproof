RestmengeCheck checks the rest amount of a fhir entry.

rename AmountCheck

``//RestmengeCheck.py:
``import``
class RestmengeCheck(FhirCheck):
    ``init``
    entries = []    
    ``check``
    ``end``
``

Die Check-Funktion.

``/check:
    def check(self, entry):
        ``.``
``

Bei Masters mit Aliquoten soll die Restmenge null
sein, bei Masters ohne Aliquote soll die Restmenge groesser null sein.

Wie finden wir die Restmenge im Json? In der Simplifier Doku gibt es
specimen.container.specimenQuantity:restAmount. Das zeigt auf
Specimen.container.specimenQuantity im Json. 

for each aliquot, remember in shouldzerorest that the restamount of
its parent should be 0. in the end() method, we check for each parent
that that's the case.

``
self.entries.append(entry) # remember for later
self.fp.shouldzerorest[entry["fullUrl"]] = False
resource = dig(entry, "resource")
# parents of derived-aliquotes should be with zero rest
if fh.type(resource) == "DERIVED":
    self.fp.shouldzerorest[fh.parent_fhirid(resource)] = True
``

get the sampleid and amounts.

``
restamount = fh.restmenge(resource)
sampleid = fh.sampleid(resource)
``

the amounts should be numbers, not strings.

``
if not isinstance(restamount, numbers.Number):
    self.err(f"restamount for sample {sampleid} needs to be a number ({type(restamount).__name__}).")
``

also check the collection quantity.

``
collectionQuantity = dig(resource, "collection/quantity/value")
if collectionQuantity is not None and not isinstance(collectionQuantity, numbers.Number):
    self.err(f"collection quantity for sample {sampleid} needs to be a number (not {type(collectionQuantity).__name__}).")
``

if the restamout is zero there shouldn't be a lagerort.

``
if (restamount is None or restamount == 0) and fh.lagerort(resource) is not None:
    self.err(f"restmenge for sample {sampleid} is zero, and there is a sampleLocation given, please remove the sampleLocation")
``

Am Ende werden die Restmengen zusammengekratzt.

``/end:
def end(self):
    for entry in self.entries:
        #    restamount = entry["resource"]["container"][0]["specimenQuantity"]["value"]
        restamount = fh.restmenge(dig(entry, "resource"))
        sampleid = fh.sampleid(dig(entry, "resource"))
        # should restamount be zero, but isn't?
        if dig(entry, "fullUrl") in self.fp.shouldzerorest and self.fp.shouldzerorest[dig(entry, "fullUrl")] == True and restamount > 0:
            self.err(f"restamount (container.specimenQuantity) for sample {sampleid} should be zero, but is {restamount}")

``

init initialisiert RestmengeCheck.

``/init:
    def __init__(self, fp):
        FhirCheck.__init__(self, fp)
``

und imports.

``/import:
import re

import numbers
from dip import dig
from fhirproof.FhirCheck import *
from fhirproof.fhirhelp import fhirhelp as fh
``

